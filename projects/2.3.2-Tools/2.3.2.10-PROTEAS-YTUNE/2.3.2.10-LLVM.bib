# Put your BibTeX entries in this file.

@article{kruse2018loop,
  title={Loop Optimization Framework},
  author={Kruse, Michael and Finkel, Hal},
  journal={LCPC 2018; arXiv:1811.00632},
  year={2018}
}

@inproceedings{kruse2018user,
  title={User-Directed Loop-Transformations in Clang},
  author={Kruse, Michael and Finkel, Hal},
  booktitle={2018 IEEE/ACM 5th Workshop on the LLVM Compiler Infrastructure in HPC (LLVM-HPC)},
  pages={49--58},
  year={2018},
  organization={IEEE}
}

@inproceedings{doerfert2018compiler,
  title={Compiler optimizations for OpenMP},
  author={Doerfert, Johannes and Finkel, Hal},
  booktitle={International Workshop on OpenMP},
  pages={113--127},
  year={2018},
  organization={Springer}
}

@inproceedings{doerfert2019tregion,
  title={The TRegion Interface and Compiler Optimizations for OpenMP Target Regions},
  author={Doerfert, Johannes and Diaz, Jose Manuel Monsalve and Finkel, Hal},
  booktitle={International Workshop on OpenMP},
  pages={153--167},
  year={2019},
  organization={Springer}
}

@misc{P1609R0,
  title={P1609R0: C++ Should Support Just-in-Time Compilation},
  author={Finkel, Hal},
  howpublished={\url{http://wg21.link/p1609r0}},
  year={2019}
}

@article{finkel2019clangjit,
  title={ClangJIT: Enhancing C++ with Just-in-Time Compilation},
  author={Finkel, Hal and Poliakoff, David and Richards, David F},
  journal={arXiv preprint arXiv:1904.08555},
  year={2019}
}


@InProceedings{giorgis2020,
author="Georgakoudis, Giorgis
and Doerfert, Johannes
and Laguna, Ignacio
and Scogland, Thomas R. W.",
editor="Milfeld, Kent
and de Supinski, Bronis R.
and Koesterke, Lars
and Klinkenberg, Jannis",
title={{FAROS: A Framework to Analyze OpenMP Compilation Through Benchmarking and Compiler Optimization Analysis}},
booktitle="OpenMP: Portable Multi-Level Parallelism on Modern Systems",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="3--17",
abstract="Compilers optimize OpenMP programs differently than their serial elision. Early outlining of parallel regions and invocation of parallel code via OpenMP runtime functions are two of the most profound differences. Understanding the interplay between compiler optimizations, OpenMP compilation, and application performance is hard and usually requires specialized benchmarks and compilation analysis tools.",
isbn="978-3-030-58144-2"
}


@misc{OpenMPOpt2020,
  title={{(OpenMP) Parallelism Aware Optimizations}},
  author={Doerfert, Johannes and Huber, Joseph and Stipanovic, Stefan and Georgakoudis, Giorgis and Tobon Mosquera, Hamilton and Tian, Shilei},
  howpublished={\url{https://whova.com/embedded/session/llvm_202010/1162344/}},
  year={2020}
}

@article{kruse2020search,
  title={{Autotuning Search Space for Loop Transformations}},
  author={Kruse, Michael and Finkel, Hal and Wu, Xingfu},
  journal={LLVM-HPC Workshop @SC},
  year={2020}
}

@article{finkel2020dsl,
  title={{\emph{Really} Embedding Domain-Specific Languages into C++}},
  author={Finkel, Hal and McCaskey, Alex and Popoola, Tobi and Lyakh, Dmitry and Doerfert, Johannes},
  journal={LLVM-HPC Workshop @SC},
  year={2020}
}
